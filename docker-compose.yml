services:
  postgres:
    image: postgres:16-alpine
    container_name: dove-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: dove
      POSTGRES_PASSWORD: dove
      POSTGRES_DB: dove
      POSTGRES_INITDB_ARGS: "-E UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./configs/postgres/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dove"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dove-network

  redis:
    image: redis:7-alpine
    container_name: dove-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ""
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dove-network

  # Optional: Redis Stack (includes RedisInsight)
  redis-stack:
    image: redis/redis-stack:latest
    container_name: dove-redis-stack
    restart: unless-stopped
    ports:
      - "8001:8001"  # RedisInsight web UI
      - "6380:6379"  # Redis Stack port (different from main Redis)
    volumes:
      - redis-stack-data:/data
    environment:
      - REDIS_ARGS=--appendonly yes
    networks:
      - dove-network
    profiles:
      - tools

  # Optional: Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: dove-jaeger
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: 'true'
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    networks:
      - dove-network
    profiles:
      - observability

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: dove-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - dove-network
    profiles:
      - observability

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: dove-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: 'false'
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - dove-network
    profiles:
      - observability

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  redis-stack-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  dove-network:
    driver: bridge
